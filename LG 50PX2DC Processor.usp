/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Crestron Electronics
System Name:
System Number:
Programmer: PAC
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "LG 50PX2DC Processor"
// #HINT ""
#DEFINE_CONSTANT CONTRAST   103
#DEFINE_CONSTANT BRIGHTNESS 104
#DEFINE_CONSTANT COLOR      105
#DEFINE_CONSTANT TINT       106
#DEFINE_CONSTANT SHARPNESS  107
#DEFINE_CONSTANT VOLUME		  102
#DEFINE_CONSTANT CHANNEL	  97
// #CATEGORY "" 
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE
#HELP_BEGIN
	This module is for use inside the LG 50PX2DC module only.
#HELP_END
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Send, DigitalIn[12];
ANALOG_INPUT Address;
BUFFER_INPUT FromDevice$[500];

STRING_OUTPUT Tuner_Channel$, ToDevice$;
ANALOG_OUTPUT AnalogOut[7];
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
*******************************************************************************************/
INTEGER Semaphore, element, IDReceived, Storage[16], Value, Parameter, iTemp1, iTemp2,
				iTemp3, iTemp4;
STRING Tempstring$[500];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Integer_Function Calculate(Integer MSB, Integer LSB)
	{print("MSB = %d, LSB = %d\n", MSB, LSB);
	if(MSB < 58)
		MSB = MSB - 48;
	else
		MSB = MSB - 87;
	if(LSB < 58)
		LSB = LSB - 48;
	else
		LSB = LSB - 87;
	Return(MSB * 16 + LSB);
	}
		
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH DigitalIn
	{
	Element = getlastmodifiedarrayindex();
	}

Release DigitalIn
	{
	Element = 0;
	}

PUSH Send
	{
    if((Element < 7) && (Element > 0))
    	{
    	if(Storage[Element] < 100)
    		{
    		Storage[Element] = Storage[Element] + 1;
    		Switch(Element)
    			{
    			Case(1): { Makestring(ToDevice$, "kg %02X %02X\r", Address, Storage[Element]); }
    			Case(2): { Makestring(ToDevice$, "kh %02X %02X\r", Address, Storage[Element]); }
    			Case(3): { Makestring(ToDevice$, "ki %02X %02X\r", Address, Storage[Element]); }
    			Case(4): { Makestring(ToDevice$, "kj %02X %02X\r", Address, Storage[Element]); }
    			Case(5): { Makestring(ToDevice$, "kk %02X %02X\r", Address, Storage[Element]); }
    			Case(6): { Makestring(ToDevice$, "kf %02X %02X\r", Address, Storage[Element]); }
    			}
    		}
    	}
    else if((element > 6) && (element < 13))
    	{
    	if(Storage[element - 6] > 0)
    		{
    		Storage[element - 6] = storage[element - 6] - 1;
    		Switch(element - 6)
    			{
    			Case(1): { Makestring(ToDevice$, "kg %02X %02X\r", Address, Storage[Element - 6]); }
    			Case(2): { Makestring(ToDevice$, "kh %02X %02X\r", Address, Storage[Element - 6]); }
    			Case(3): { Makestring(ToDevice$, "ki %02X %02X\r", Address, Storage[Element - 6]); }
    			Case(4): { Makestring(ToDevice$, "kj %02X %02X\r", Address, Storage[Element - 6]); }
    			Case(5): { Makestring(ToDevice$, "kk %02X %02X\r", Address, Storage[Element - 6]); }
    			Case(6): { Makestring(ToDevice$, "kf %02X %02X\r", Address, Storage[Element - 6]); }
    			}
    		}
    	}		
	}

Change FromDevice$
	{
    if(len(FromDevice$) > 200)
	{
		FromDevice$ = "";
		tempstring$ = "";
	}
	if(Semaphore = 0)
		{
		Semaphore = 1;
		While((find("\x0D\x0A", FromDevice$) > 0) && (len(FromDevice$) > 8))
			{
			if(find("NG", FromDevice$) > 0)
				{
				Tempstring$ = Remove("\x0D\x0A", FromDevice$);
				tempstring$ = "";
				}
			else if(len(FromDevice$) > 9)
				{
				Tempstring$ = Remove("\x0D\x0A", FromDevice$);print("Tempstring$ = %s", TempString$);
				IDReceived = Calculate(Byte(Tempstring$, 3), Byte(Tempstring$, 4));print("IDRevceived = %d, Address = %d\n", IDReceived, Address);
				if(IDReceived = Address)
					{
					Parameter = Byte(Tempstring$, 1);print("Parameter = %d\r", Parameter);
					Value = CAlculate(Byte(Tempstring$, 8), Byte(Tempstring$, 9));
					Switch(Parameter)
						{
						Case(Contrast):
							{
							AnalogOut[1] = Value;
							Storage[1] = Value;
							}
						Case(BRIGHTNESS):
							{
							AnalogOut[2] = VAlue;
							Storage[2] = Value;
							}
						Case(COLOR):
							{
							AnalogOut[3] = Value;
							Storage[3] = Value;
							}
						Case(TINT):
							{
							AnalogOut[4] = Value;
							Storage[4] = VAlue;
							}
						Case(SHARPNESS):
							{
							AnalogOut[5] = Value;
							Storage[5] = Value;
							}
						Case(VOLUME):
							{
							AnalogOut[6] = Value;
							Storage[6] = Value;
							}
						Case(Channel):
							{
							if(len(Tempstring$) > 17)
								{
								AnalogOut[7] = CAlculate(Byte(Tempstring$, 8), Byte(Tempstring$, 9));
								iTemp1 = CAlculate(Byte(Tempstring$, 10), Byte(Tempstring$, 11));
								iTemp2 = CAlculate(Byte(Tempstring$, 12), Byte(Tempstring$, 13));
								iTemp3 = CAlculate(Byte(Tempstring$, 14), Byte(Tempstring$, 15));
								iTemp4 = CAlculate(Byte(Tempstring$, 16), Byte(Tempstring$, 17));
								makestring(Tuner_Channel$, "%d-%d", ((iTemp1 * 256) + iTemp2), ((iTemp3 * 256) + itemp4));
								}
							}
						}
					}
				}
			}
		Semaphore = 0;
		}
	}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
	{
    Semaphore = 0;
    Element = 0;
	}
